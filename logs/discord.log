[2025-01-05 19:13:52] [INFO    ] discord.client: logging in using static token
[2025-01-05 19:13:53] [INFO    ] discord.gateway: Shard ID None has connected to Gateway (Session ID: 98b2047004b745a26024f23e6988b617).
[2025-01-05 19:15:56] [ERROR   ] discord.client: Ignoring exception in on_message
Traceback (most recent call last):
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/discord/client.py", line 449, in _run_event
    await coro(*args, **kwargs)
  File "/mnt/2tbdrive/projects/RoyBot/src/main.py", line 19, in on_message
    await messages.handle_message(client, message)
  File "/mnt/2tbdrive/projects/RoyBot/src/handlers/messages.py", line 45, in handle_message
    data = requests.get(results["results"][0]["media_formats"]["mediumgif"]["url"]).content
                        ~~~~~~~^^^^^^^^^^^
KeyError: 'results'
[2025-01-05 19:21:36] [WARNING ] discord.gateway: Shard ID None heartbeat blocked for more than 10 seconds.
Loop thread traceback (most recent call last):
  File "/mnt/2tbdrive/projects/RoyBot/src/main.py", line 21, in <module>
    client.run(secret_token.secret_token, log_handler=logger)
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/discord/client.py", line 869, in run
    asyncio.run(runner())
  File "/usr/lib/python3.12/asyncio/runners.py", line 194, in run
    return runner.run(main)
  File "/usr/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
  File "/usr/lib/python3.12/asyncio/base_events.py", line 674, in run_until_complete
    self.run_forever()
  File "/usr/lib/python3.12/asyncio/base_events.py", line 641, in run_forever
    self._run_once()
  File "/usr/lib/python3.12/asyncio/base_events.py", line 1987, in _run_once
    handle._run()
  File "/usr/lib/python3.12/asyncio/events.py", line 88, in _run
    self._context.run(self._callback, *self._args)
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/discord/client.py", line 449, in _run_event
    await coro(*args, **kwargs)
  File "/mnt/2tbdrive/projects/RoyBot/src/main.py", line 19, in on_message
    await messages.handle_message(client, message)
  File "/mnt/2tbdrive/projects/RoyBot/src/handlers/messages.py", line 55, in handle_message
    if image_circler.circle_gif(f"/mnt/2tbdrive/projects/RoyBot/downloads/attachment-{roy_counter.roy_count + 1}.gif", "roy", success_dest=f"/mnt/2tbdrive/projects/RoyBot/downloads/attachment-{roy_counter.roy_count + 1}.jpeg"):
  File "/mnt/2tbdrive/projects/RoyBot/src/image_circler.py", line 97, in circle_gif
    if circle_word(frame, word, False, success_dest):
  File "/mnt/2tbdrive/projects/RoyBot/src/image_circler.py", line 31, in circle_word
    data = pytesseract.image_to_boxes(gray_img).lower().split("\n") if not case_sens else pytesseract.image_to_boxes(gray_img).split("\n")
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/pytesseract/pytesseract.py", line 552, in image_to_boxes
    return {
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/pytesseract/pytesseract.py", line 559, in <lambda>
    Output.STRING: lambda: run_and_get_output(*args),
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/pytesseract/pytesseract.py", line 352, in run_and_get_output
    run_tesseract(**kwargs)
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/pytesseract/pytesseract.py", line 282, in run_tesseract
    with timeout_manager(proc, timeout) as error_string:
  File "/usr/lib/python3.12/contextlib.py", line 137, in __enter__
    return next(self.gen)
  File "/mnt/2tbdrive/projects/RoyBot/venv/lib/python3.12/site-packages/pytesseract/pytesseract.py", line 144, in timeout_manager
    yield proc.communicate()[1]
  File "/usr/lib/python3.12/subprocess.py", line 1209, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.12/subprocess.py", line 2115, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.12/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)

